set_property( GLOBAL PROPERTY USE_FOLDERS ON)

set(BUILD_TYPE_LIST "DEBUG;RELEASE")
set(CMAKE_CONFIGURATION_TYPES ${BUILD_TYPE_LIST} CACHE STRING "Configurations" FORCE)
set(CMAKE_BUILD_TYPE ${VARIANT})
if(CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}
      CACHE STRING "Choose the type of build: DEBUG RELEASE"
      FORCE)
else()
  set(CMAKE_BUILD_TYPE RELEASE
      CACHE STRING "Choose the type of build: DEBUG RELEASE"
      FORCE)
endif()

#BUILD FLAGS
option(BUILD_TESTS "Build tests." OFF)
option(BUILD_DOC "Build documentation (doxygen required)." OFF)

option(BUILD_SHARED_LIBS "DLL" OFF)
option(BUILD_STATIC_LIBS  "LIB" OFF)


set(SUPPORTED_UNIX_GENERATORS "MinGW MakeFiles;Unix MakeFiles")
set(SUPPORTED_WIN32_GENERATORS "Visual Studio 12 2013;Nmake MakeFiles")
set(SUPPORTED_PLATFORMS "WIN86;WIN64")
set(ANALYSIS_TYPE_LIST "COVERAGE;ASAN;PROFILE")

#build types
set("DEBUG_FLAGS" "-g3 -Od")
set("RELEASE_FLAGS" "-O2")
#profiling types
set("COVERAGE_FLAGS" "--coverage")
set("ASAN_FLAGS" "-fsanitize=address -fno-omit-frame-pointer ")
set("PROFILE_FLAGS" "-pg")
#definitions
set(DEBUG_DEFINITIONS "${DEBUG_DEFINITIONS}_UNICODE;UNICODE")
set(RELEASE_DEFINITIONS "${RELEASE_DEFINITIONS}_UNICODE;UNICODE")
set(VS_TYPYCAL_FLAGS_ALL_CONFIGURATIONS "/GS /analyze- /W3 /Zc:wchar_t /Gm- /fp:precise /errorReport:prompt /WX- /Zc:forScope /Gd /Oy- /EHsc /nologo")
set(VS_TYPYCAL_FLAGS_DEBUG "-Od -ZI -RTC1 -Zm250 ")
set(VS_TYPYCAL_FLAGS_RELEASE "-O2 -Zi -Zm250")

message(STATUS "CMAKE_GENERATOR: [${CMAKE_GENERATOR}]")
message(STATUS "LINK: [${LINK}]")
message(STATUS "VARIANT: [${VARIANT}]")
message(STATUS "RUNTIME: [${RUNTIME}]")

#if cmake runned as build solution set VS flags
STRING(FIND ${CMAKE_GENERATOR} "Visual Studio" APOSITION)
STRING(FIND ${CMAKE_GENERATOR} "NMake Makefiles" BPOSITION)
if(${APOSITION} STREQUAL "0" OR ${BPOSITION} STREQUAL "0")
	message(STATUS "BUILDED SOLUTION FOR ${CMAKE_GENERATOR}")
	set("DEBUG_FLAGS" "/${RUNTIME}d ${VS_TYPYCAL_FLAGS_ALL_CONFIGURATIONS} ${VS_TYPYCAL_FLAGS_DEBUG} ")
	set("RELEASE_FLAGS" "/${RUNTIME} ${VS_TYPYCAL_FLAGS_ALL_CONFIGURATIONS} ${VS_TYPYCAL_FLAGS_RELEASE} ")
else()
        message(FATAL_ERROR "defined {BUILDTYPE_FLAGS} for your generator")
endif()

#initialize FLAGS
set(CMAKE_C_FLAGS "")
set(CMAKE_CXX_FLAGS "")
#add BUILD FLAGS to compiler flags
FOREACH(BUILD_TYPE ${BUILD_TYPE_LIST})
	set("CMAKE_C_FLAGS_${BUILD_TYPE}" "${CMAKE_C_FLAGS} ${${BUILD_TYPE}_FLAGS} " )
	set("CMAKE_CXX_FLAGS_${BUILD_TYPE}" "${CMAKE_CXX_FLAGS} ${${BUILD_TYPE}_FLAGS} " )
	if(CMAKE_ANALYSIS_TYPE STREQUAL "Coverage") 
		set("CMAKE_C_FLAGS_${BUILD_TYPE}" "${CMAKE_C_FLAGS_${BUILD_TYPE}} ${COVERAGE_FLAGS} " )
		set("CMAKE_CXX_FLAGS_${BUILD_TYPE}" "${CMAKE_CXX_FLAGS_${BUILD_TYPE}} ${COVERAGE_FLAGS} " )
	elseif(CMAKE_ANALYSIS_TYPE STREQUAL "ASan") 
		set("CMAKE_C_FLAGS_${BUILD_TYPE}" "${CMAKE_C_FLAGS_${BUILD_TYPE}} ${ASAN_FLAGS} " )
		set("CMAKE_CXX_FLAGS_${BUILD_TYPE}" "${CMAKE_CXX_FLAGS_${BUILD_TYPE}} ${ASAN_FLAGS} " )
	elseif(CMAKE_ANALYSIS_TYPE STREQUAL "Profile") 
		set("CMAKE_C_FLAGS_${BUILD_TYPE}" "${CMAKE_C_FLAGS_${BUILD_TYPE}} ${PROFILE_FLAGS} " )
		set("CMAKE_CXX_FLAGS_${BUILD_TYPE}" "${CMAKE_CXX_FLAGS_${BUILD_TYPE}} ${PROFILE_FLAGS} " )
	else()
	endif()	
	set(DEFINITIONS "${${BUILD_TYPE}_DEFINITIONS}")
	FOREACH(DEFINITION ${DEFINITIONS}) 
		set("CMAKE_C_FLAGS_${BUILD_TYPE}" "${CMAKE_C_FLAGS_${BUILD_TYPE}} -D${DEFINITION} " )
		set("CMAKE_CXX_FLAGS_${BUILD_TYPE}" "${CMAKE_CXX_FLAGS_${BUILD_TYPE}} -D${DEFINITION} " )		
	ENDFOREACH()	
	message(STATUS "CMAKE_CXX_FLAGS_${BUILD_TYPE}: [${CMAKE_CXX_FLAGS_${BUILD_TYPE}}]")
endforeach()
message(STATUS "Analysis type: [${CMAKE_ANALYSIS_TYPE}]")